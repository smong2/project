<?php
class User Extends BaseObject
{
	protected $__userId;       // CMN
	protected $__isLogged = 0; // 로그인 했는지 여부

	// NATE 정보
	protected $__nateId;     // 네이트 ID
	protected $__email;      // 이메일
	protected $__gender;     // M: Male, F: Female
	protected $__birthday;   // YYYYMMDD
	protected $__lunar;      // 0: 음력, 1: 양력
	protected $__realAge;    // 만 나이
	protected $__realname;   // 실명
	protected $__realnameCd; // Y: 실명인증, N: 실명인증안됨
	protected $__cyworldId;  // 싸이월드 아이디
	protected $__nateNick;   // 네이트 닉네임

	protected $__type;       // 로그인 아이디 유형 - 네이트 : N, 싸이 : C
	protected $__link;       // 연동된 아이디 N일 경우 CyID, C일 경우 NateID

	// Cyworld 정보

	protected $__profileImage;     // 프로필 이미지
	protected $__friendCnt;        // 나의 커넥팅 피플
	protected $__reverseFriendCnt; // 나를 피플로 추가한 친구
	protected $__followingCnt;
	protected $__followerCnt;
	protected $__msgCnt;           // 내가 보낸 커넥팅
	protected $__domain;
	protected $__nickname;
	protected $__toastYN;
	protected $__profileImageUrl;
	protected $__profileThumbnailUrl;
	protected $__msgOpenDefault;
	protected $__creatDt; // 최근 데이터 입력일
	protected $__isTempDomain;
	protected $__isDomainsOwner;

	// 친구 정보
	private $_friendGbs = array(); // {userId: FRIEND_GB_XXX} 피플 여부를 저장한다.
	private $_nateBuddyCnt;        // 네이트 친구 수
	private $_cyBuddyCnt;          // 싸이 친구 수

	const PROFILE_TYPE_CUSTOM = 0; // 사용자 등록 이미지

	const FRIEND_GB_YES     = 1;
	const FRIEND_GB_NO      = 2;
	const FRIEND_GB_UNKNOWN = 3;

	// 처음 방문자 카운트 - 몇명에게 커넥팅이 발송되는지 수치 정보
	const REG_SOURCE_NATE = 1; // nateOn 친구 수
	const REG_SOURCE_CY   = 2; // cy 1촌 수

	public static function instance($pk) /*{{{*/
	{
		static $sInstance = array();

		$pk = strval($pk);

		if (isset($sInstance[$pk]) === false) {
			$className      = __CLASS__;
			$obj            = new $className($pk);
			$sInstance[$pk] = $obj;
		}

		return $sInstance[$pk];
	} /*}}}*/

	protected function __construct($userId) /*{{{*/
	{
		$this->__userId = $userId;
	} /*}}}*/

	/***************************************************************************** 
	 ***** LOAD ****************************************************************** 
	 *****************************************************************************/

	/**
	 * 나의 커넥팅 상태 정보를 가져온다.
	 * 
	 * @return User $user 객체에 값을 저장하여 $this 를 반환한다.
	 */
	public function loadConnectingInfo() /*{{{*/
	{
		$pdo = PDO_Manager::getConnectDB();

		$query = 'exec dbo.ncsp2010_member_select :user_id;';
		$stmt  = $pdo->prepare($query);
		$stmt->bindValue(':user_id', $this->__userId, PDO::PARAM_STR);
		$stmt->execute();

		$results = array();
		if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
			Logger::debug($row);
			if ($row['PROFILE_IMAGE'] == false) {
				$row['PROFILE_IMAGE'] = '';
			}
			$this->setProfileImage($row['PROFILE_IMAGE']);
			$this->setFriendCnt($row['FRIEND_CNT']);
			$this->setReverseFriendCnt($row['R_FRIEND_CNT']);
			$this->setMsgCnt($row['MSG_CNT']);
			$this->setToastYN($row['TOAST_YN']);
		}
		else {
			$this->setProfileImage('');
			$this->setFriendCnt(0);
			$this->setReverseFriendCnt(0);
			$this->setReverseFriendCnt(0);
			$this->setToastYN('');
		}

		return $this;
	} /*}}}*/

	/**
	 * 커넥팅 유저 정보를 가져온다
	 */
	public function getUserInfo($domain = '', $nickname = '') /*{{{*/
	{
		return ContainerAPI::getUserInfo($this, $domain, $nickname);
	} /*}}}*/

	/***************************************************************************** 
	 ***** 기타 SET 함수들 ******************************************************* 
	 *****************************************************************************/

	/**
	 * 친구인지 여부를 저장한다.
	 * 
	 * @param User $user 친구이지 여부를 저장할 사용자 객체
	 * @param int $friendGb FRIEND_GB_XXX 값으로 저장한다.
	 */
	public function setFriendGb(User $user, $friendGb) /*{{{*/
	{
		$this->_friendGbs[$user->getUserId()] = $friendGb;
	} /*}}}*/

	/***************************************************************************** 
	 ***** 기타 GET 함수들 ******************************************************* 
	 *****************************************************************************/

	/**
	 * 내가 등록한 외부 블로그 목록을 가져온다.
	 * 
	 * @return array of MyExtBlog
	 */
	public function getMyExtBlogs() /*{{{*/
	{
		$pdo = PDO_Manager::getConnectDB();

		$query = 'exec dbo.ncsp2010_memberblog_list :user_id, :current_page, :perpage';
		$stmt  = $pdo->prepare($query);
		$stmt->bindValue(':user_id',      $this->__userId, PDO::PARAM_STR);
		$stmt->bindValue(':current_page', 1,               PDO::PARAM_INT);
		$stmt->bindValue(':perpage',      50,              PDO::PARAM_INT);
		$stmt->execute();

		$results = array();
		while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
			if (mb_detect_encoding($row['BLOG_NM']) != 'UTF-8') {
				$row['BLOG_NM'] = mb_convert_encoding($row['BLOG_NM'], 'utf-8', 'cp949');
			}
			if (mb_detect_encoding($row['BLOG_TITLE']) != 'UTF-8') {
				$row['BLOG_TITLE'] = mb_convert_encoding($row['BLOG_TITLE'], 'utf-8', 'cp949');
			}

			$myExtBlog = MyExtBlog::instance($row['BLOGDOC_SEQ']);
			$myExtBlog->setExtBlog(ExtBlog::instance($row['BLOG_ID']));
			$myExtBlog->setOwner($this);
			$myExtBlog->setBlogTitle($row['BLOG_TITLE']);
			$myExtBlog->setBlogUrl($row['BLOG_URL']);

			$results[] = $myExtBlog;
		}

		return $results;
	} /*}}}*/

	/*
	 * 네이트온, 싸이일촌 수
	 *
	 * @return array of MemberRegSourceCnt  // 1 : 네이트온 친구 수, 2: 싸이 일촌 수
	 */
	private function _loadMemberCntByRegSource() /*{{{*/
	{
		$this->_nateBuddyCnt = 0;
		$this->_cyBuddyCnt   = 0;

		$pdo = PDO_Manager::getBuddyDB();

		$query = 'exec dbo.ncsp2010_friend_select_count_by_reg_source :user_id';
		$stmt  = $pdo->prepare($query);
		$stmt->bindValue(':user_id', $this->__userId, PDO::PARAM_STR);
		$stmt->execute();

		$memberCnt = array();
		while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
			switch ($row['REG_SOURCE']) {
				case self::REG_SOURCE_NATE:
					$this->_nateBuddyCnt = $row['CNT'];
					break;

				case self::REG_SOURCE_CY:
					$this->_cyBuddyCnt = $row['CNT'];
					break;
			}

			$memberCnt[$row['REG_SOURCE']] = $row['CNT'];
		}
	} /*}}}*/

	/**
	 * 네이트 친구 수 가져오기
	 */
	public function getNateBuddyCnt() /*{{{*/
	{
		if (isset($this->_nateBuddyCnt) === false) {
			$this->_loadMemberCntByRegSource();
		}
		return $this->_nateBuddyCnt;
	} /*}}}*/

	/**
	 * 3일 동안 자기 자신을 피플로 추가한 친구/일촌 수
	 */
	public function getReversePeopleCntFor3Days() /*{{{*/
	{
		$pdo = PDO_Manager::getBuddyDB();

		$query = 'exec dbo.ncsp2010_r_friend_list_by_created :user_id, :create_dt';
		$stmt  = $pdo->prepare($query);
		$stmt->bindValue(':user_id',   $this->__userId,                        PDO::PARAM_STR);
		$stmt->bindValue(':create_dt', date('Y-m-d H:i:s', time()-60*60*24*3), PDO::PARAM_STR);
		$stmt->execute();

		if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
			return $row['tot_cnt'];
		}

		return 0;
	} /*}}}*/

	/**
	 * 싸이 친구 수 가져오기
	 */
	public function getCyBuddyCnt() /*{{{*/
	{
		if (isset($this->_cyBuddyCnt) === false) {
			$this->_loadMemberCntByRegSource();
		}
		return $this->_cyBuddyCnt;
	} /*}}}*/

	/**
	 * 친구인지 여부를 반환한다.
	 * 
	 * @param User $user 친구이지 여부를 판단할 사용자 객체
	 * 
	 * @return bool 친구이면 true 를 반환한다.
	 */
	public function isFriend(User $user) /*{{{*/
	{
		if ($user->getUserId() == $this->__userId) {
			return true;
		}

		if (isset($this->_friendGbs[$user->getUserId()]) === false) {
			return false;
		}

		if ($this->_friendGbs[$user->getUserId()] != self::FRIEND_GB_YES) {
			return false;
		}

		return true;
	} /*}}}*/

	/***************************************************************************** 
	 ***** HTML 을 위한 GET 함수들 *********************************************** 
	 *****************************************************************************/

	/**
	 * 네이트 계정인지, 또는 네이트 연동 계정인지 여부를 반환한다.
	 * 
	 * @return bool 네이트 게정, 싸이 계정이지만 연동이 되어 있는 경우 true를 반환한다.
	 */
	public function isNateAccount() /*{{{*/
	{
		if ($this->getType() == 'N') {
			return true;
		}
		if ($this->getType() == 'C' && $this->getLink() != '') {
			return true;
		}

		return false;
	} /*}}}*/

	/**
	 * 로그인 여부를 반환한다.
	 * 
	 * @return bool 로그인 했으면 TRUE 를 반환한다.
	 */
	public function isLogged() /*{{{*/
	{
		return (bool) $this->getIsLogged();
	} /*}}}*/

	/**
	 * 첫 방문인지 확인
	 * 
	 * @return bool // 첫 방문이면 true 
	 */
	public function isFirstVisit() /*{{{*/
	{
		$pdo = PDO_Manager::getConnectDB();

		$query = 'exec dbo.ncsp2010_membersvc_select :user_id';
		$stmt  = $pdo->prepare($query);
		$stmt->bindValue(':user_id', $this->__userId, PDO::PARAM_STR);
		$stmt->execute();

		return ($stmt->fetch(PDO::FETCH_ASSOC) == false);
	} /*}}}*/

	/**
	 * 사용자가 등록한 프로필 이미지 URL 을 반환한다.
	 * 
	 * @return string
	 */
	public function getProfileImageUrl() /*{{{*/
	{
		return self::generateProfileImageUrl(self::PROFILE_TYPE_CUSTOM, $this->getProfileImage());
	} /*}}}*/

	/**
	 * $profileType과 $profileUrl을 참조하여 프로필 이미지 URL 을 반환한다.
	 * 
	 * $profileType 이 1 ~ 5 이면 제공 이미지이다.
	 * $profileType 이 0 이면 사용자 등록 이미지이다.
	 * 
	 * @param int $profileType 프로필 타입
	 * @param int $profileUrl 프로필 URL
	 * 
	 * @return string
	 */
	public static function generateProfileImageUrl($profileType, $profileUrl = '') /*{{{*/
	{
		if ($profileType == self::PROFILE_TYPE_CUSTOM) {
			if ($profileUrl) {
				return 'http://connect.nateimg.co.kr/thumb_56x56_prop/http://cyimg.cyworld.com/common/file_down.asp?redirect=' . $profileUrl;
			}
			else {
				return 'http://connect.nate.com/img/thumb_56x56_01.gif';
			}
		}
		else {
			return 'http://connect.nate.com/img/thumb_56x56_0' . $profileType . '.gif';
		}
	} /*}}}*/
}
?>
