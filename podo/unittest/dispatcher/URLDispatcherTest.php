<?php
// Call URLDispatcherTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "URLDispatcherTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once dirname(__FILE__).'/../../class/Podo/Dispatcher.php';

/**
 * Test class for URLDispatcher.
 * Generated by PHPUnit_Util_Skeleton on 2007-03-14 at 15:57:07.
 */
class URLDispatcherTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("URLDispatcherTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

	private $urldispatcher;
	private $arr_patterns;
	private $arr_default;
    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    	// 비슷한 조건이 겹칠 경우를 위해 ACTION, PARAM, ALL, 기타 순서로 써야 한다. -_-; by kimgua
		$arr_patterns[0]["attr"]["TYPE"] = "ACTION";
		$arr_patterns[0]["EXPRESSION"][0]["data"] = "/^(\w+)\/(\w+)\/(\w+)\??/i";
		$arr_patterns[0]["MAPPING"][0]["data"] = "Controller/Action/Boardid";

		$arr_patterns[1]["attr"]["TYPE"] = "PARAM";
		$arr_patterns[1]["attr"]["PARAM"] = "ic";
		$arr_patterns[1]["attr"]["TARGET"] = "URI";
		$arr_patterns[1]["EXPRESSION"][0]["data"] = "/^([^\?\/ ]+)\??\/?/i";
		$arr_patterns[1]["MAPPING"][0]["data"] = "boardid";

		$arr_patterns[2]["attr"]["TYPE"] = "PARAM";
		$arr_patterns[2]["attr"]["PARAM"] = "ib";
		$arr_patterns[2]["attr"]["VALUE"] = "1";
		$arr_patterns[2]["attr"]["TARGET"] = "ALL";
		$arr_patterns[2]["EXPRESSION"][0]["data"] = "/^www.cyworld.nate.com\/([^\?\/ ]+)\??\/?/i";
		$arr_patterns[2]["MAPPING"][0]["data"] = "www.cyworld.nate.com/contentid";

    	// ALL일 경우 마지막에 ?를 제외하는 조건을 줘야 한다. by kimgua
		$arr_patterns[3]["attr"]["TYPE"] = "ALL";
		$arr_patterns[3]["EXPRESSION"][0]["data"] = "/^www.cyworld.nate.com\/([^\/\? ]+)\??/i";
		$arr_patterns[3]["MAPPING"][0]["data"] = "www.cyworld.nate.com/userid";

		$arr_patterns[4]["attr"]["TYPE"] = "HOST";
		$arr_patterns[4]["EXPRESSION"][0]["data"] = "/^(.+).search.nate.com/i";
		$arr_patterns[4]["MAPPING"][0]["data"] = "ID.search.nate.com";

		// 같은 비교 조건 일 경우 긴조건을 앞쪽에 써야 한다. -_-; by kimgua
		// (.+) 대신에 에러율 감소를 위해 (\w+) 사용을 권장. by kimgua
		$arr_patterns[5]["attr"]["TYPE"] = "URI";
		$arr_patterns[5]["EXPRESSION"][0]["data"] = "/^(\w+)\/(\w+)\/(\w+)\/(\w+)\??/i";
		$arr_patterns[5]["MAPPING"][0]["data"] = "Controller/Homeid/boardid/articleid";
		// CONTROLLER 태그가 MAPPING보다 우선한다.
		$arr_patterns[5]["CONTROLLER"][0]["data"] = "{\$2}Controller";
		$arr_patterns[5]["ACTION"][0]["data"] = "{\$3}Action";
		$arr_patterns[5]["VIEW"][0]["data"] = "{\$2}_{\$3}.php";
		$arr_patterns[5]["PARAM"][0]["attr"]["ID"] = "boardseq";
		$arr_patterns[5]["PARAM"][0]["data"] = "{\$3}";
		$arr_patterns[5]["PARAM"][1]["attr"]["ID"] = "articleseq";
		$arr_patterns[5]["PARAM"][1]["data"] = "{\$4}";

		$arr_patterns[6]["attr"]["TYPE"] = "URI";
		$arr_patterns[6]["EXPRESSION"][0]["data"] = "%^(repo)\/(edit|editAction)\/(.*)$%i";
		$arr_patterns[6]["CONTROLLER"][0]["data"] = "repo";
		$arr_patterns[6]["ACTION"][0]["data"] = "edit";
		$arr_patterns[6]["PARAM"][0]["attr"]["ID"] = "repo_id";
		$arr_patterns[6]["PARAM"][0]["data"] = "{\$3}";

		$arr_patterns[7]["attr"]["TYPE"] = "URI";
		$arr_patterns[7]["EXPRESSION"][0]["data"] = "/^(\w+)\/(\w+)\/(\w+)\??/i";
		$arr_patterns[7]["MAPPING"][0]["data"] = "Controller/Action/Boardid";

		$arr_patterns[8]["attr"]["TYPE"] = "URI";
		$arr_patterns[8]["EXPRESSION"][0]["data"] = "/^(\w+)\/(\w+)\??/i";
		$arr_patterns[8]["MAPPING"][0]["data"] = "Userid/Homeid";
		$arr_patterns[8]["CONTROLLER"][0]["data"] = "testController";
		$arr_patterns[8]["ACTION"][0]["data"] = "testAction";

		$arr_patterns[9]["attr"]["TYPE"] = "URI";
		$arr_patterns[9]["EXPRESSION"][0]["data"] = "/^(\w+)$/i";
		$arr_patterns[9]["CONTROLLER"][0]["data"] = "{\$1}Controller";
		$arr_patterns[9]["ACTION"][0]["data"] = "do<\$1>";
//echo "<pre>";
//var_dump($arr_patterns);
//echo "</pre>";
		$arr_default["CONTROLLER"][0]["data"] = "Podo_Controller_Base";
		$arr_default["ACTION"][0]["data"] = "excute";
//echo "<pre>";
//var_dump($arr_default);
//echo "</pre>";
		$this->arr_patterns = $arr_patterns;
		$this->arr_default = $arr_default;
    	$this->urldispatcher = Podo_Dispatcher::instance($arr_patterns, $arr_default);
    }

    /**
     * @todo Implement testParseUrl().
     */
    public function testParseUrl() {
    	$str_url = "c2.search.nate.com";
    	$arr_purl[0] = "c2.search.nate.com";
    	$arr_purl[1] = "c2.search.nate.com";
    	$arr_purl[2] = FALSE;
    	$arr_purl[3] = FALSE;
		$arr_parsed_url = $this->urldispatcher->parseUrl($str_url);
		$this->assertEquals($arr_purl, $arr_parsed_url);

    	$str_url = $str_url."/";
    	$arr_purl[0] = "c2.search.nate.com/";
    	$arr_purl[1] = "c2.search.nate.com";
    	$arr_purl[2] = FALSE;
    	$arr_purl[3] = FALSE;
		$arr_parsed_url = $this->urldispatcher->parseUrl($str_url);
		$this->assertEquals($arr_purl, $arr_parsed_url);

    	$str_url = $str_url."///";
    	$arr_purl[0] = "c2.search.nate.com////";
    	$arr_purl[1] = "c2.search.nate.com";
    	$arr_purl[2] = FALSE;
    	$arr_purl[3] = FALSE;
		$arr_parsed_url = $this->urldispatcher->parseUrl($str_url);
		$this->assertEquals($arr_purl, $arr_parsed_url);

    	$str_url = $str_url."/hello///index&&.php";
    	$arr_purl[0] = "c2.search.nate.com/////hello///index&&.php";
    	$arr_purl[1] = "c2.search.nate.com";
    	$arr_purl[2] = "hello/index&&.php";
    	$arr_purl[3] = FALSE;
		$arr_parsed_url = $this->urldispatcher->parseUrl($str_url);
		$this->assertEquals($arr_purl, $arr_parsed_url);

    	$str_url = $str_url."?test=1&action=id&&&id=ok//";
    	$arr_purl[0] = "c2.search.nate.com/////hello///index&&.php?test=1&action=id&&&id=ok//";
    	$arr_purl[1] = "c2.search.nate.com";
    	$arr_purl[2] = "hello/index&&.php?action=id";
    	$arr_purl[3] = "test=1&id=ok//";
		$arr_parsed_url = $this->urldispatcher->parseUrl($str_url);
		$this->assertEquals($arr_purl, $arr_parsed_url);
    }

    /**
     * @todo Implement testFindUrlPattern().
     */
    public function testFindUrlPattern() {
    	$str_url = "search.nate.com/dispatcher.php?action=bbs/list/free&aa=1";
		$arr_find = $this->urldispatcher->findUrlPattern($str_url);
		$this->assertEquals($arr_find, $this->arr_patterns[0]);

    	$str_url = "search.nate.com/kimgua/test?ACTion=bbs/list/free&aa=1";
		$arr_find = $this->urldispatcher->findUrlPattern($str_url);
		$this->assertEquals($arr_find, $this->arr_patterns[0]);

        $str_url = "www.cyworld.nate.com/boardid/param?test=1&ic=";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[1]);
        
        $str_url = "www.cyworld.nate.com/contentid/userid?test=1&ib=1";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[2]);
        
        $str_url = "www.cyworld.nate.com/contentid/userid?test=1&ib=2";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[3]);
        
        $str_url = "www.cyworld.nate.com/userid?test=1";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[3]);
        
        $str_url = "www.cyworld.nate.com/userid/idid";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[3]);
        
        $str_url = "c2.search.nate.com/hello/index.php?test=1";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[4]);

        $str_url = "c2.nate.com/kimgua/myhome/freeboard/12?test=1";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[5]);
        
    	$str_url = "std.wiki.com/repo/edit/catz-gsp";
		$arr_find = $this->urldispatcher->findUrlPattern($str_url);
		$this->assertEquals($arr_find, $this->arr_patterns[6]);

        $str_url = "cyworld.nate.com/kimgua/myhome/myboard?test=1";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[7]);
        
        $str_url = "c2.nate.com/kimgua/myhome?test=1";
        $arr_find = $this->urldispatcher->findUrlPattern($str_url);
        $this->assertEquals($arr_find, $this->arr_patterns[8]);

    	$str_url = "search.nate.com/kimgua?test=1";
		$arr_find = $this->urldispatcher->findUrlPattern($str_url);
		$this->assertEquals($arr_find, $this->arr_patterns[9]);

    	$str_url = "search.nate.com?test=1";
		$arr_find = $this->urldispatcher->findUrlPattern($str_url);
		$this->assertEquals($arr_find, array());
    }

    /**
     * @todo Implement testParsePattern().
     */
    public function testParsePattern() {
        //$this->markTestSkipped();

    	$str_url = "www.cyworld.nate.com/boardid/param?test=1&ic=";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_default["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_default["ACTION"][0]["data"];
    	$arr_assay["boardid"] = "boardid";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "www.cyworld.nate.com/contentid/userid?test=1&ib=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_default["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_default["ACTION"][0]["data"];
    	$arr_assay["contentid"] = "contentid";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "www.cyworld.nate.com/contentid/userid?test=1&ib=2";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_default["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_default["ACTION"][0]["data"];
    	$arr_assay["userid"] = "contentid";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "www.cyworld.nate.com/userid?test=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_default["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_default["ACTION"][0]["data"];
    	$arr_assay["userid"] = "userid";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "www.cyworld.nate.com/userid/idid";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_default["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_default["ACTION"][0]["data"];
    	$arr_assay["userid"] = "userid";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);
		
    	$str_url = "c2.search.nate.com/hello/index.php?test=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_default["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_default["ACTION"][0]["data"];
    	$arr_assay["ID"] = "c2";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);
		
    	$str_url = "cyworld.nate.com/kimgua/myhome/myboard?test=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = "kimgua";
    	$arr_assay["ACTION"] = "myhome";
    	$arr_assay["Boardid"] = "myboard";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "std.wiki.com/repo/edit/catz-gsp";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = "repo";
    	$arr_assay["ACTION"] = "edit";
    	$arr_assay["repo_id"] = "catz-gsp";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "c2.nate.com/kimgua/myhome?test=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_patterns[8]["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_patterns[8]["ACTION"][0]["data"];
    	$arr_assay["Userid"] = "kimgua";
    	$arr_assay["Homeid"] = "myhome";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "c2.nate.com/kimgua/myhome?test=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = $this->arr_patterns[8]["CONTROLLER"][0]["data"];
    	$arr_assay["ACTION"] = $this->arr_patterns[8]["ACTION"][0]["data"];
    	$arr_assay["Userid"] = "kimgua";
    	$arr_assay["Homeid"] = "myhome";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "c2.nate.com/kimgua/myhome/freeboard/12?test=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = "myhomeController";
    	$arr_assay["ACTION"] = "freeboardAction";
    	$arr_assay["VIEW"] = "myhome_freeboard.php";
    	$arr_assay["boardseq"] = "freeboard";
    	$arr_assay["articleseq"] = "12";
    	$arr_assay["Homeid"] = "myhome";
    	$arr_assay["boardid"] = "freeboard";
    	$arr_assay["articleid"] = "12";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);

    	$str_url = "c2.nate.com/kimgua?test=1";
    	$arr_assay = array();
    	$arr_assay["CONTROLLER"] = "kimguaController";
    	$arr_assay["ACTION"] = "doKimgua";
		$arr_parse = $this->urldispatcher->parsePattern($str_url);
		$this->assertEquals($arr_parse, $arr_assay);
	}

    /**
     * @todo Implement testParseEreg().
     */
    public function testParseEreg() {
    	$arr_arr_mapping[1] = "aa";
    	$arr_arr_mapping[2] = "bb";
    	$arr_arr_mapping[3] = "cc";
    	$str_value = "{\$1}_{\$3}_{\$2}";
    	$str_changed = "aa_cc_bb";
		$str_return = $this->urldispatcher->parseEreg($str_value, $arr_arr_mapping);
		$this->assertEquals($str_return, $str_changed);

        $arr_arr_mapping[2] = "bb/dd";
    	$str_value = "<\$1>_{\$3}_<\$2>";
    	$str_changed = "Aa_cc_Bb_Dd";
		$str_return = $this->urldispatcher->parseEreg($str_value, $arr_arr_mapping);
		$this->assertEquals($str_return, $str_changed);
    }

    /**
     * @todo Implement testParseParam().
     */
    public function testParseParam() {
    	$str_params = "test=1&id=ok&ib=";
    	$arr_param[0] = "test=1";
    	$arr_param[1] = "id=ok";
    	$arr_param[2] = "ib=";
		$arr_split = $this->urldispatcher->parseParam($str_params);
		$this->assertEquals($arr_split, $arr_param);
    }
}

// Call URLDispatcherTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "URLDispatcherTest::main") {
    URLDispatcherTest::main();
}
?>
